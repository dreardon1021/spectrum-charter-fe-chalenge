{"version":3,"sources":["Nav/Nav.js","SearchForm/SearchForm.js","FilterButtonContainer/FilterButtonContainer.js","SearchContainer/SearchContainer.js","RestaurantTable/RestaurantTable.js","App/App.js","reportWebVitals.js","index.js"],"names":["Nav","logoResetTable","allRestaurantData","onClick","className","SearchForm","updateCurrentSearchData","formResetTable","state","searchValue","e","this","setState","target","name","value","resetOnInputDelete","searchQuery","props","preventDefault","placeholder","onChange","updateSearchState","submitSearchForm","type","Component","FilterButtonContainer","filterData","possibleRestaurantStates","possibleRestaurantGenres","currentGenreFilter","currentStateFilter","htmlFor","updateFiltersOnChange","map","genre","SearchContainer","RestaurantTable","dataToDisplay","handleClick","bind","currentPage","restaurantsPerPage","Number","id","length","indexOfLastRestaurant","indexOfFirstRestaurant","renderRestaurants","slice","restaurant","index","restaurantGenres","split","join","city","telephone","pageNumbers","i","Math","ceil","push","renderPageNumbers","number","classname","App","currentSearchData","currentFilterData","filterOn","searchOn","data","possibleStates","forEach","includes","possibleGenres","fetch","method","headers","Authorization","then","response","json","sort","a","b","localeCompare","findPossibleRestaurantStates","findPossibleRestaurantGenres","filter","genreFilter","stateFilter","filteredData","currentIterableRestaurantGenres","adjustDisplayedData","allData","newSearchQuery","newCurrentSearchData","resturant","toLowerCase","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f5c742b.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Nav.css'\nimport '../App/App.css'\n\n\n\nconst Nav = ({ logoResetTable, allRestaurantData }) => {\n  return(\n    <nav>\n      <h1 onClick={() => logoResetTable(allRestaurantData)} className=\"logo cursor-pointer\">Restauraunt Locator</h1>\n    </nav>\n  )\n}\n\nexport default Nav","import React, { Component } from \"react\";\nimport \"./SearchForm.css\";\nimport \"../App/App.css\"\n\nclass SearchForm extends Component {\n  constructor({ updateCurrentSearchData, formResetTable, allRestaurantData }) {\n    super({ updateCurrentSearchData, formResetTable, allRestaurantData });\n    this.state = {\n      searchValue: \"\"\n    };\n  }\n\n  updateSearchState(e) {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      this.resetOnInputDelete(e)\n    });\n  }\n\n  resetOnInputDelete(e) {\n    let searchQuery = this.state.searchValue;\n    if (e.target.value === '') {\n      this.props.formResetTable(this.props.allRestaurantData)\n      this.props.updateCurrentSearchData(searchQuery)\n    }\n  }\n\n  submitSearchForm(e) {\n    e.preventDefault();\n    let searchQuery = this.state.searchValue;\n    this.props.updateCurrentSearchData(searchQuery)\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\">\n        <input\n          className=\"search-input\"\n          name=\"searchValue\"\n          value={this.state.searchValue}\n          placeholder=\"Search by name, city, or genre\"\n          onChange={e => this.updateSearchState(e)}\n        />\n        <button\n          onClick={e => this.submitSearchForm(e)}\n          className=\"cursor-pointer search-filter-btn\"\n          type=\"submit\"\n        >\n          Search\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\nimport \"./FilterButtonContainer.css\";\nimport \"../App/App.css\"\n\nclass FilterButtonContainer extends Component {\n  constructor({ filterData, possibleRestaurantStates, possibleRestaurantGenres }) {\n    super({ filterData, possibleRestaurantStates, possibleRestaurantGenres });\n    this.state = {\n      currentGenreFilter: '',\n      currentStateFilter: ''\n    };\n  }\n\n  updateFiltersOnChange(e) {\n    this.setState({[e.target.name]: e.target.value}, () => {\n      this.props.filterData(this.state.currentGenreFilter, this.state.currentStateFilter)\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"filter-form\">\n        <div className=\"genre-state-select-container\">\n          <label htmlFor=\"select-genre\" className=\"filter-headers\">\n            Select Genre:\n          </label>\n          <select onChange={e => this.updateFiltersOnChange(e)} className=\"filter-select\" name=\"currentGenreFilter\">\n            <option value=\"\">No Filter</option>\n            {this.props.possibleRestaurantGenres.map(genre => {\n              return <option key={genre} value={genre}>{genre}</option>;\n            })}\n          </select>\n        </div>\n        <div className=\"genre-state-select-container\">\n          <label htmlFor=\"select-state\" className=\"filter-headers\">\n            Select State:\n          </label>\n          <select onChange={e => this.updateFiltersOnChange(e)} className=\"filter-select\" name=\"currentStateFilter\">\n            <option value=\"\">No Filter</option>\n            {this.props.possibleRestaurantStates.map(state => {\n              return <option key={state} value={state}>{state}</option>;\n            })}\n          </select>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default FilterButtonContainer;\n","import React from \"react\";\nimport \"./SearchContainer.css\";\nimport \"../App/App.css\"\n\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport FilterButtonContainer from \"../FilterButtonContainer/FilterButtonContainer\";\n\nconst SearchContainer = ({ filterData, formResetTable, allRestaurantData, updateCurrentSearchData, possibleRestaurantGenres, possibleRestaurantStates }) => {\n  return (\n    <section className=\"search-container\">\n      <SearchForm allRestaurantData={allRestaurantData} formResetTable={formResetTable} updateCurrentSearchData={updateCurrentSearchData} />\n      <FilterButtonContainer\n        allRestaurantData={allRestaurantData}\n        filterData={filterData}\n        possibleRestaurantStates={possibleRestaurantStates}\n        possibleRestaurantGenres={possibleRestaurantGenres}\n      />\n    </section>\n  );\n};\n\nexport default SearchContainer;\n","import React, { Component } from \"react\";\nimport \"./RestaurantTable.css\";\n\nclass RestaurantTable extends Component {\n  constructor({ dataToDisplay }) {\n    super({ dataToDisplay });\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      currentPage: 1,\n      restaurantsPerPage: 10\n    };\n  }\n\n  handleClick(e) {\n    this.setState({\n      currentPage: Number(e.target.id)\n    });\n  }\n\n\n  render() {\n    let { currentPage, restaurantsPerPage } = this.state;\n\n    currentPage = this.props.dataToDisplay.length < 10 ? 1 : currentPage\n    if(this.state.currentPage !== currentPage) {\n      this.setState({currentPage: 1})\n    }\n\n    const indexOfLastRestaurant = currentPage * restaurantsPerPage;\n    const indexOfFirstRestaurant = indexOfLastRestaurant - restaurantsPerPage;\n    const currentRestaurants = this.props.dataToDisplay.slice(\n      indexOfFirstRestaurant,\n      indexOfLastRestaurant\n    );\n\n    const renderRestaurants = currentRestaurants.map((restaurant, index) => {\n      let restaurantGenres = restaurant.genre.split(\",\").join(\", \");\n      return (\n        <tr className=\"restaurant-table-row\" key={index}>\n          <td className=\"restaurant-table-data-cell name-cell\">\n            {restaurant.name}\n          </td>\n          <td className=\"restaurant-table-data-cell city-cell\">\n            {restaurant.city}\n          </td>\n          <td className=\"restaurant-table-data-cell state-cell\">\n            {restaurant.state}\n          </td>\n          <td className=\"restaurant-table-data-cell telephone-cell\">\n            {restaurant.telephone}\n          </td>\n          <td className=\"restaurant-table-data-cell genre-cell\">\n            {restaurantGenres}\n          </td>\n        </tr>\n      );\n    });\n\n    const pageNumbers = [];\n    for (\n      let i = 1;\n      i <= Math.ceil(this.props.dataToDisplay.length / restaurantsPerPage);\n      i++\n    ) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <li key={number}>\n          <button\n            id={number}\n            onClick={this.handleClick}\n            className={(this.state.currentPage === number ? 'active ' : '') + \"page-button cursor-pointer\"}\n          >\n            {number}\n          </button>\n        </li>\n      );\n    });\n\n    return this.props.dataToDisplay.length !== 0 ? (\n      <section className=\"table-container\">\n        <h2 className=\"table-header\">Available Restaurants</h2>\n        <table className=\"restaurant-table\">\n          <tbody classname=\"restaurant-table-body\">{renderRestaurants}</tbody>\n        </table>\n        <ul className=\"page-numbers-container\">{renderPageNumbers}</ul>\n      </section>\n    ) : (\n      <section className=\"table-container error-container\">\n        <h2>No Restaurants Found in Search/Filter</h2>\n      </section>\n    );\n  }\n}\n\nexport default RestaurantTable;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Nav from \"../Nav/Nav\";\nimport SearchContainer from \"../SearchContainer/SearchContainer\";\nimport RestaurantTable from \"../RestaurantTable/RestaurantTable\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.logoResetTable = this.logoResetTable.bind(this);\n    this.updateCurrentSearchData = this.updateCurrentSearchData.bind(this);\n    this.filterData = this.filterData.bind(this);\n    this.formResetTable = this.formResetTable.bind(this);\n    this.state = {\n      allRestaurantData: [],\n      currentSearchData: [],\n      currentFilterData: [],\n      dataToDisplay: [],\n      possibleRestaurantStates: [],\n      possibleRestaurantGenres: [],\n      filterOn: false,\n      searchOn: false\n    };\n  }\n\n  findPossibleRestaurantStates(data) {\n    let possibleStates = [];\n    data.forEach(restaurant => {\n      if (!possibleStates.includes(restaurant.state)) {\n        possibleStates.push(restaurant.state);\n      }\n    });\n    return possibleStates;\n  }\n\n  findPossibleRestaurantGenres(data) {\n    let possibleGenres = [];\n    data.forEach(restaurant => {\n      let restaurantGenreArray = restaurant.genre.split(\",\");\n      restaurantGenreArray.forEach(genre => {\n        if (!possibleGenres.includes(genre)) {\n          possibleGenres.push(genre);\n        }\n      });\n    });\n    return possibleGenres;\n  }\n\n  componentDidMount() {\n    fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Api-Key q3MNxtfep8Gt\"\n      }\n    })\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          allRestaurantData: data,\n          currentSearchData: data,\n          currentFilterData: data,\n          dataToDisplay: data.sort((a,b) => a.name.localeCompare(b.name)),\n          possibleRestaurantStates: this.findPossibleRestaurantStates(data),\n          possibleRestaurantGenres: this.findPossibleRestaurantGenres(data)\n        })\n      );\n  }\n\n  adjustDisplayedData() {\n    let dataToDisplay;\n    if (this.state.filterOn === false && this.state.searchOn === true) {\n      dataToDisplay = this.state.currentSearchData\n    } else if (this.state.filterOn === true && this.state.searchOn === false) {\n      dataToDisplay = this.state.currentFilterData\n    } else if (this.state.searchOn === true && this.state.filterOn === true) {\n      dataToDisplay = this.state.currentFilterData.filter(restaurant => {\n        if (this.state.currentSearchData.includes(restaurant)) {\n          return restaurant\n        }\n      })\n    } else {\n      dataToDisplay = this.state.allRestaurantData\n    }\n    this.setState({dataToDisplay: dataToDisplay.sort((a,b) => a.name.localeCompare(b.name)) })\n  }\n\n  filterData(genreFilter, stateFilter) {\n    let filteredData = this.state.allRestaurantData.filter(restaurant => {\n      let currentIterableRestaurantGenres = restaurant.genre.split(\",\");\n      if (\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        restaurant.state === stateFilter &&\n        stateFilter !== \"\" &&\n        genreFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        stateFilter === \"\" &&\n        genreFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        restaurant.state === stateFilter &&\n        stateFilter !== \"\" &&\n        genreFilter === \"\"\n      ) {\n        return restaurant;\n      } else if (stateFilter === \"\" && genreFilter === \"\") {\n        return restaurant;\n      }\n    });\n\n    this.setState({\n      currentFilterData: filteredData,\n      filterOn: true\n    }, () => {\n      this.adjustDisplayedData()\n    });\n    if (stateFilter === \"\" && genreFilter === \"\") {\n      this.setState({ filterOn: false }, () => {\n        this.adjustDisplayedData()\n      });\n    }\n  }\n\n  formResetTable(allData) {\n    this.setState({ currentSearchData: allData });\n  }\n\n  logoResetTable(allData) {\n    this.setState({\n      currentSearchData: allData,\n      currentFilterData: allData,\n      dataToDisplay: allData\n    });\n  }\n\n  updateCurrentSearchData(newSearchQuery) {\n    let newCurrentSearchData = [];\n    this.state.allRestaurantData.forEach(resturant => {\n      if (\n        resturant.name.toLowerCase().match(newSearchQuery.toLowerCase()) ||\n        resturant.city.toLowerCase().match(newSearchQuery.toLowerCase()) ||\n        resturant.genre.toLowerCase().match(newSearchQuery.toLowerCase())\n      ) {\n        newCurrentSearchData.push(resturant);\n      }\n    });\n    this.setState({ currentSearchData: newCurrentSearchData, searchOn: true }, () => {\n      this.adjustDisplayedData()\n    });\n  }\n\n  render() {\n    return (\n      <main>\n        <Nav\n          logoResetTable={this.logoResetTable}\n          allRestaurantData={this.state.allRestaurantData}\n        />\n        <SearchContainer\n          updateCurrentSearchData={this.updateCurrentSearchData}\n          formResetTable={this.formResetTable}\n          filterData={this.filterData}\n          allRestaurantData={this.state.allRestaurantData}\n          possibleRestaurantStates={this.state.possibleRestaurantStates}\n          possibleRestaurantGenres={this.state.possibleRestaurantGenres}\n        />\n        <RestaurantTable\n          dataToDisplay={this.state.dataToDisplay}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}