{"version":3,"sources":["Nav/Nav.js","SearchForm/SearchForm.js","FilterButtonContainer/FilterButtonContainer.js","SortButtonsContainer/SortButtonsContainer.js","SearchContainer/SearchContainer.js","RestaurantTable/RestaurantTable.js","App/App.js","reportWebVitals.js","index.js"],"names":["Nav","logoResetTable","allRestaurantData","data-testid","onClick","className","SearchForm","updateCurrentSearchData","formResetTable","state","searchValue","e","this","setState","target","name","value","resetOnInputDelete","searchQuery","props","preventDefault","placeholder","onChange","updateSearchState","submitSearchForm","type","Component","FilterButtonContainer","filterData","possibleRestaurantStates","possibleRestaurantGenres","possibleRestaurantAttire","currentGenreFilter","currentStateFilter","currentAttireFilter","htmlFor","updateFiltersOnChange","map","genre","attire","SortButtonsContainer","sortDisplayDataByState","sortDisplayDataByName","sortByName","sortByState","SearchContainer","RestaurantTable","dataToDisplay","handleClick","bind","currentPage","restaurantsPerPage","Number","id","length","indexOfLastRestaurant","indexOfFirstRestaurant","renderRestaurants","slice","restaurant","index","restaurantGenres","split","join","city","telephone","pageNumbers","i","Math","ceil","push","renderPageNumbers","number","App","currentSearchData","currentFilterData","filterOn","searchOn","data","possibleStates","forEach","includes","possibleAttire","attireStr","charAt","toUpperCase","possibleGenres","fetch","method","headers","Authorization","then","response","json","sort","a","b","localeCompare","findPossibleRestaurantStates","findPossibleRestaurantGenres","findPossibleRestaurantAttire","filter","genreFilter","stateFilter","attireFilter","filteredData","currentIterableRestaurantGenres","restaurantAttire","adjustDisplayedData","allData","newSearchQuery","newCurrentSearchData","resturant","toLowerCase","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea3cdf57.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Nav.css'\nimport '../App/App.css'\n\n\n\nconst Nav = ({ logoResetTable, allRestaurantData }) => {\n  return(\n    <nav data-testid=\"nav\">\n      <h1 onClick={() => logoResetTable(allRestaurantData)} className=\"logo cursor-pointer\">Restauraunt Locator</h1>\n    </nav>\n  )\n}\n\nexport default Nav","import React, { Component } from \"react\";\nimport \"./SearchForm.css\";\nimport \"../App/App.css\"\n\nclass SearchForm extends Component {\n  constructor({ updateCurrentSearchData, formResetTable, allRestaurantData }) {\n    super({ updateCurrentSearchData, formResetTable, allRestaurantData });\n    this.state = {\n      searchValue: \"\"\n    };\n  }\n\n  updateSearchState(e) {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      this.resetOnInputDelete(e)\n    });\n  }\n\n  resetOnInputDelete(e) {\n    let searchQuery = this.state.searchValue;\n    if (e.target.value === '') {\n      this.props.formResetTable(this.props.allRestaurantData)\n      this.props.updateCurrentSearchData(searchQuery)\n    }\n  }\n\n  submitSearchForm(e) {\n    e.preventDefault();\n    let searchQuery = this.state.searchValue;\n    this.props.updateCurrentSearchData(searchQuery)\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\">\n        <input\n          className=\"search-input\"\n          name=\"searchValue\"\n          value={this.state.searchValue}\n          placeholder=\"Search by name, city, or genre\"\n          onChange={e => this.updateSearchState(e)}\n        />\n        <button\n          onClick={e => this.submitSearchForm(e)}\n          className=\"cursor-pointer search-filter-btn\"\n          type=\"submit\"\n        >\n          Search\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\nimport \"./FilterButtonContainer.css\";\nimport \"../App/App.css\"\n\nclass FilterButtonContainer extends Component {\n  constructor({ filterData, possibleRestaurantStates, possibleRestaurantGenres, possibleRestaurantAttire }) {\n    super({ filterData, possibleRestaurantStates, possibleRestaurantGenres });\n    this.state = {\n      currentGenreFilter: '',\n      currentStateFilter: '',\n      currentAttireFilter: ''\n    };\n  }\n\n  updateFiltersOnChange(e) {\n    this.setState({[e.target.name]: e.target.value}, () => {\n      this.props.filterData(this.state.currentGenreFilter, this.state.currentStateFilter, this.state.currentAttireFilter)\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"filter-form\">\n        <div className=\"genre-state-select-container\">\n          <label htmlFor=\"select-genre\" className=\"filter-headers\">\n            Select Genre:\n          </label>\n          <select onChange={e => this.updateFiltersOnChange(e)} className=\"filter-select\" name=\"currentGenreFilter\">\n            <option value=\"\">No Filter</option>\n            {this.props.possibleRestaurantGenres.map(genre => {\n              return <option key={genre} value={genre}>{genre}</option>;\n            })}\n          </select>\n        </div>\n        <div className=\"genre-state-select-container\">\n          <label htmlFor=\"select-state\" className=\"filter-headers\">\n            Select State:\n          </label>\n          <select onChange={e => this.updateFiltersOnChange(e)} className=\"filter-select\" name=\"currentStateFilter\">\n            <option value=\"\">No Filter</option>\n            {this.props.possibleRestaurantStates.map(state => {\n              return <option key={state} value={state}>{state}</option>;\n            })}\n          </select>\n        </div>\n        <div className=\"genre-state-select-container\">\n          <label htmlFor=\"select-state\" className=\"filter-headers\">\n            Select Attire:\n          </label>\n          <select onChange={e => this.updateFiltersOnChange(e)} className=\"filter-select\" name=\"currentAttireFilter\">\n            <option value=\"\">No Filter</option>\n            {this.props.possibleRestaurantAttire.map(attire => {\n              return <option key={attire} value={attire}>{attire}</option>;\n            })}\n          </select>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default FilterButtonContainer;\n","import React, { Component } from \"react\";\nimport \"./SortButtonsContainer.css\";\n\nclass SortButtonsContainer extends Component {\n  constructor({ sortDisplayDataByState, sortDisplayDataByName }) {\n    super({ sortDisplayDataByState, sortDisplayDataByName });\n    this.state = {\n      sortByName: true,\n      sortByState: false\n    };\n  }\n\n  sortByState() {\n    this.setState({ sortByName: false, sortByState: true }, () => {\n      this.props.sortDisplayDataByState();\n    });\n  }\n\n  sortByName() {\n    this.setState({ sortByName: true, sortByState: false }, () => {\n      this.props.sortDisplayDataByName();\n    });\n  }\n\n  render() {\n    return (\n      <section className=\"sort-buttons-container\">\n        <button\n          className={\n            (this.state.sortByName === true ? \"active \" : \"\") +\n            \"sort-button cursor-pointer\"\n          }\n          onClick={() => this.sortByName()}\n        >\n          Sort by Name\n        </button>\n        <button\n          className={\n            (this.state.sortByState === true ? \"active \" : \"\") +\n            \"sort-button cursor-pointer\"\n          }\n          onClick={() => this.sortByState()}\n        >\n          Sort by State\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default SortButtonsContainer;\n","import React from \"react\";\nimport \"./SearchContainer.css\";\nimport \"../App/App.css\"\n\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport FilterButtonContainer from \"../FilterButtonContainer/FilterButtonContainer\";\nimport SortButtonsContainer from \"../SortButtonsContainer/SortButtonsContainer\"\n\nconst SearchContainer = ({ filterData, formResetTable, sortDisplayDataByState, sortDisplayDataByName, allRestaurantData, updateCurrentSearchData, possibleRestaurantGenres, possibleRestaurantStates, possibleRestaurantAttire }) => {\n  return (\n    <section className=\"search-container\">\n      <SearchForm allRestaurantData={allRestaurantData} formResetTable={formResetTable} updateCurrentSearchData={updateCurrentSearchData} />\n      <FilterButtonContainer\n        allRestaurantData={allRestaurantData}\n        filterData={filterData}\n        possibleRestaurantStates={possibleRestaurantStates}\n        possibleRestaurantGenres={possibleRestaurantGenres}\n        possibleRestaurantAttire={possibleRestaurantAttire}\n      />\n      <SortButtonsContainer\n        sortDisplayDataByState={sortDisplayDataByState}\n        sortDisplayDataByName={sortDisplayDataByName}\n      />\n    </section>\n  );\n};\n\nexport default SearchContainer;\n","import React, { Component } from \"react\";\nimport \"./RestaurantTable.css\";\n\nclass RestaurantTable extends Component {\n  constructor({ dataToDisplay }) {\n    super({ dataToDisplay });\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      currentPage: 1,\n      restaurantsPerPage: 10\n    };\n  }\n\n  handleClick(e) {\n    this.setState({\n      currentPage: Number(e.target.id)\n    });\n  }\n\n\n  render() {\n    let { currentPage, restaurantsPerPage } = this.state;\n\n    if (this.props.dataToDisplay.length < 10) {\n      currentPage = 1\n    } else if (this.props.dataToDisplay.length < 20 && currentPage > 2) {\n      currentPage = 1\n    } else if (this.props.dataToDisplay.length < 30 && currentPage > 3) {\n      currentPage = 1\n    } else {\n      currentPage = currentPage\n    }\n\n\n    if(this.state.currentPage !== currentPage) {\n      this.setState({currentPage: 1})\n    }\n\n    const indexOfLastRestaurant = currentPage * restaurantsPerPage;\n    const indexOfFirstRestaurant = indexOfLastRestaurant - restaurantsPerPage;\n    const currentRestaurants = this.props.dataToDisplay.slice(\n      indexOfFirstRestaurant,\n      indexOfLastRestaurant\n    );\n\n    const renderRestaurants = currentRestaurants.map((restaurant, index) => {\n      let restaurantGenres = restaurant.genre.split(\",\").join(\", \");\n      return (\n        <tr className=\"restaurant-table-row\" key={index}>\n          <td className=\"restaurant-table-data-cell name-cell\">\n            {restaurant.name}\n          </td>\n          <td className=\"restaurant-table-data-cell city-cell\">\n            {restaurant.city}\n          </td>\n          <td className=\"restaurant-table-data-cell state-cell\">\n            {restaurant.state}\n          </td>\n          <td className=\"restaurant-table-data-cell telephone-cell\">\n            {restaurant.telephone}\n          </td>\n          <td className=\"restaurant-table-data-cell genre-cell\">\n            {restaurantGenres}\n          </td>\n        </tr>\n      );\n    });\n\n    const pageNumbers = [];\n    for (\n      let i = 1;\n      i <= Math.ceil(this.props.dataToDisplay.length / restaurantsPerPage);\n      i++\n    ) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <li key={number}>\n          <button\n            id={number}\n            onClick={this.handleClick}\n            className={(this.state.currentPage === number ? 'active ' : '') + \"page-button cursor-pointer\"}\n          >\n            {number}\n          </button>\n        </li>\n      );\n    });\n\n    return this.props.dataToDisplay.length !== 0 ? (\n      <section className=\"table-container\">\n        <h2 className=\"table-header\">Available Restaurants</h2>\n        <table className=\"restaurant-table\">\n          <tbody className=\"restaurant-table-body\">{renderRestaurants}</tbody>\n        </table>\n        <ul className=\"page-numbers-container\">{renderPageNumbers}</ul>\n      </section>\n    ) : (\n      <section className=\"table-container error-container\">\n        <h2>No Restaurants Found in Search/Filter</h2>\n      </section>\n    );\n  }\n}\n\nexport default RestaurantTable;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Nav from \"../Nav/Nav\";\nimport SearchContainer from \"../SearchContainer/SearchContainer\";\nimport RestaurantTable from \"../RestaurantTable/RestaurantTable\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.logoResetTable = this.logoResetTable.bind(this);\n    this.updateCurrentSearchData = this.updateCurrentSearchData.bind(this);\n    this.filterData = this.filterData.bind(this);\n    this.formResetTable = this.formResetTable.bind(this);\n    this.sortDisplayDataByState = this.sortDisplayDataByState.bind(this);\n    this.sortDisplayDataByName = this.sortDisplayDataByName.bind(this);\n    this.state = {\n      allRestaurantData: [],\n      currentSearchData: [],\n      currentFilterData: [],\n      dataToDisplay: [],\n      possibleRestaurantStates: [],\n      possibleRestaurantGenres: [],\n      possibleRestaurantAttire: [],\n      filterOn: false,\n      searchOn: false,\n      sortByState: false,\n      sortByName: true\n    };\n  }\n\n  findPossibleRestaurantStates(data) {\n    let possibleStates = [];\n    data.forEach(restaurant => {\n      if (!possibleStates.includes(restaurant.state)) {\n        possibleStates.push(restaurant.state);\n      }\n    });\n    return possibleStates;\n  }\n\n  findPossibleRestaurantAttire(data) {\n    let possibleAttire = [];\n    data.forEach(restaurant => {\n      let attireStr =\n        restaurant.attire.charAt(0).toUpperCase() + restaurant.attire.slice(1);\n      if (!possibleAttire.includes(attireStr)) {\n        possibleAttire.push(attireStr);\n      }\n    });\n    return possibleAttire;\n  }\n\n  findPossibleRestaurantGenres(data) {\n    let possibleGenres = [];\n    data.forEach(restaurant => {\n      let restaurantGenreArray = restaurant.genre.split(\",\");\n      restaurantGenreArray.forEach(genre => {\n        if (!possibleGenres.includes(genre)) {\n          possibleGenres.push(genre);\n        }\n      });\n    });\n    return possibleGenres;\n  }\n\n  componentDidMount() {\n    fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Api-Key q3MNxtfep8Gt\"\n      }\n    })\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          allRestaurantData: data,\n          currentSearchData: data,\n          currentFilterData: data,\n          dataToDisplay: data.sort((a, b) => a.name.localeCompare(b.name)),\n          possibleRestaurantStates: this.findPossibleRestaurantStates(data),\n          possibleRestaurantGenres: this.findPossibleRestaurantGenres(data),\n          possibleRestaurantAttire: this.findPossibleRestaurantAttire(data)\n        })\n      );\n  }\n\n  sortDisplayDataByState() {\n    this.setState({\n      dataToDisplay: this.state.dataToDisplay.sort((a, b) =>\n        a.state.localeCompare(b.state)\n      ),\n      sortByState: true,\n      sortByName: false\n    });\n  }\n\n  sortDisplayDataByName() {\n    this.setState({\n      dataToDisplay: this.state.dataToDisplay.sort((a, b) =>\n        a.name.localeCompare(b.name)\n      ),\n      sortByState: false,\n      sortByName: true\n    });\n  }\n\n  adjustDisplayedData() {\n    let dataToDisplay;\n    if (this.state.filterOn === false && this.state.searchOn === true) {\n      dataToDisplay = this.state.currentSearchData;\n    } else if (this.state.filterOn === true && this.state.searchOn === false) {\n      dataToDisplay = this.state.currentFilterData;\n    } else if (this.state.searchOn === true && this.state.filterOn === true) {\n      dataToDisplay = this.state.currentFilterData.filter(restaurant => {\n        if (this.state.currentSearchData.includes(restaurant)) {\n          return restaurant;\n        }\n      });\n    } else {\n      dataToDisplay = this.state.allRestaurantData;\n    }\n\n    if (this.state.sortByName === true && this.state.sortByState === false) {\n      this.setState({\n        dataToDisplay: dataToDisplay.sort((a, b) =>\n          a.name.localeCompare(b.name)\n        )\n      });\n    } else if (\n      this.state.sortByName === false &&\n      this.state.sortByState === true\n    ) {\n      this.setState({\n        dataToDisplay: dataToDisplay.sort((a, b) =>\n          a.state.localeCompare(b.state)\n        )\n      });\n    }\n  }\n\n  filterData(genreFilter, stateFilter, attireFilter) {\n    let filteredData = this.state.allRestaurantData.filter(restaurant => {\n      let currentIterableRestaurantGenres = restaurant.genre.split(\",\");\n      let restaurantAttire =\n        restaurant.attire.charAt(0).toUpperCase() + restaurant.attire.slice(1);\n      if (\n        // all filled\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        restaurant.state === stateFilter &&\n        restaurantAttire === attireFilter &&\n        stateFilter !== \"\" &&\n        genreFilter !== \"\" &&\n        attireFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        // genre only\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        stateFilter === \"\" &&\n        genreFilter !== \"\" &&\n        attireFilter === \"\"\n      ) {\n        return restaurant;\n      } else if (\n        // state only\n        restaurant.state === stateFilter &&\n        stateFilter !== \"\" &&\n        genreFilter === \"\" &&\n        attireFilter === \"\"\n      ) {\n        return restaurant;\n      } else if (\n        //attire only\n        restaurantAttire === attireFilter &&\n        stateFilter === \"\" &&\n        genreFilter === \"\" &&\n        attireFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        //genre & state\n        restaurant.state === stateFilter &&\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        stateFilter !== \"\" &&\n        genreFilter !== \"\" &&\n        attireFilter === \"\"\n      ) {\n        return restaurant;\n      } else if (\n        //genre & attire\n        currentIterableRestaurantGenres.includes(genreFilter) &&\n        restaurantAttire === attireFilter &&\n        stateFilter === \"\" &&\n        genreFilter !== \"\" &&\n        attireFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        //state & attire\n        restaurant.state === stateFilter &&\n        restaurantAttire === attireFilter &&\n        stateFilter !== \"\" &&\n        genreFilter === \"\" &&\n        attireFilter !== \"\"\n      ) {\n        return restaurant;\n      } else if (\n        // all empty/no filter\n        stateFilter === \"\" &&\n        genreFilter === \"\" &&\n        attireFilter === \"\"\n      ) {\n        return restaurant;\n      }\n    });\n\n    this.setState(\n      {\n        currentFilterData: filteredData,\n        filterOn: true\n      },\n      () => {\n        this.adjustDisplayedData();\n      }\n    );\n\n    if (stateFilter === \"\" && genreFilter === \"\" && attireFilter === \"\") {\n      this.setState({ filterOn: false }, () => {\n        this.adjustDisplayedData();\n      });\n    }\n  }\n\n  formResetTable(allData) {\n    this.setState({ currentSearchData: allData });\n  }\n\n  logoResetTable(allData) {\n    this.setState({\n      currentSearchData: allData,\n      currentFilterData: allData,\n      dataToDisplay: allData\n    });\n  }\n\n  updateCurrentSearchData(newSearchQuery) {\n    let newCurrentSearchData = [];\n    this.state.allRestaurantData.forEach(resturant => {\n      if (\n        resturant.name.toLowerCase().match(newSearchQuery.toLowerCase()) ||\n        resturant.city.toLowerCase().match(newSearchQuery.toLowerCase()) ||\n        resturant.genre.toLowerCase().match(newSearchQuery.toLowerCase())\n      ) {\n        newCurrentSearchData.push(resturant);\n      }\n    });\n    this.setState(\n      { currentSearchData: newCurrentSearchData, searchOn: true },\n      () => {\n        this.adjustDisplayedData();\n      }\n    );\n\n    if (newSearchQuery === \"\") {\n      this.setState({ searchOn: false }, () => {\n        this.adjustDisplayedData();\n      });\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <Nav\n          logoResetTable={this.logoResetTable}\n          allRestaurantData={this.state.allRestaurantData}\n        />\n        <SearchContainer\n          updateCurrentSearchData={this.updateCurrentSearchData}\n          formResetTable={this.formResetTable}\n          filterData={this.filterData}\n          sortDisplayDataByState={this.sortDisplayDataByState}\n          sortDisplayDataByName={this.sortDisplayDataByName}\n          allRestaurantData={this.state.allRestaurantData}\n          possibleRestaurantStates={this.state.possibleRestaurantStates}\n          possibleRestaurantGenres={this.state.possibleRestaurantGenres}\n          possibleRestaurantAttire={this.state.possibleRestaurantAttire}\n        />\n        <RestaurantTable dataToDisplay={this.state.dataToDisplay} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}